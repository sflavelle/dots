#!/usr/bin/python
import sys
import yaml
import os
import subprocess
import argparse
from pathlib import Path
import pydymenu
import random

argParser = argparse.ArgumentParser(description='Select a stream or list of videos to watch.')
argParser.add_argument('-r', '--random', dest='random', action='store_true', help='Pick a random selection for me')
args = argParser.parse_args()

cfg = Path('~/.config/watch.yaml')
choice = None
choiceUrl = None

# Init vars
applyArgs = None
shuffle = False
newestFirst = False
isTermux = True if "TERMUX_VERSION" in os.environ else False
swRandom = args.random

with open(cfg.expanduser()) as f:
    chan = dict(yaml.load(f, Loader=yaml.FullLoader))

interactive = sys.stdout.isatty()

if swRandom:
    choice = random.choice(list(chan))
else:
    if interactive:
        choice = pydymenu.fzf(sorted(chan, reverse=True), prompt="Pick a playlist: ")
    else:
        choice = pydymenu.rofi(sorted(chan), prompt="Pick a playlist: ")

if choice == None:
    print("Aborted.")
    sys.exit(0)

# Get choice key
# print(f"{choice}, datatype {type(choice)}")
if type(choice) is str: data = chan[choice]
else: data = chan[choice[0]]

# Process key
if type(data) is str:
    choiceUrl = data
elif type(data) is dict:
    choiceUrl = data['url']
else:
    print(f"Didn't plan for this. Returned type {type(data)}")

if type(data) is dict:
    applyArgs = data['args'] if 'args' in data else None
    shuffle = bool(data['shuffle']) if 'shuffle' in data else False
    newestFirst = not bool(data['newest_first']) if 'newest_first' in data else False
    rememberPos = bool(data['remember_progress']) if 'remember_progress' in data else False

execArgs = ['/usr/bin/mpv', '--force-window=immediate']
if isTermux: execArgs = ['termux-open-url']

if not isTermux:
    if applyArgs is not None: execArgs.extend(applyArgs.split())
    if shuffle: execArgs.extend(['--shuffle'])
    if newestFirst: execArgs.extend(['--ytdl-raw-options-append=playlist-reverse='])
    if rememberPos: execArgs.extend(['--save-position-on-quit'])
execArgs.extend([choiceUrl])

print(f"Executing: {' '.join(execArgs)}")

subprocess.Popen(execArgs, stdin=subprocess.DEVNULL, stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL, start_new_session=True)
